import { createContext, useContext, ReactNode, useState } from 'react';
import { Board, GameMode } from '../types';

interface GameContextType {
  gameMode: GameMode;
  setGameMode: (mode: GameMode) => void;
  board: Board;
  setBoard: (board: Board) => void;
  solutionBoard: Board;
  setSolutionBoard: (board: Board) => void;
  isGameActive: boolean;
  setIsGameActive: (active: boolean) => void;
}

const GameContext = createContext<GameContextType | undefined>(undefined);

export const GameProvider = ({ children }: { children: ReactNode }) => {
  const [gameMode, setGameMode] = useState<GameMode>('single');
  const [board, setBoard] = useState<Board>([]);
  const [solutionBoard, setSolutionBoard] = useState<Board>([]);
  const [isGameActive, setIsGameActive] = useState(false);

  return (
    <GameContext.Provider
      value={{
        gameMode,
        setGameMode,
        board,
        setBoard,
        solutionBoard,
        setSolutionBoard,
        isGameActive,
        setIsGameActive,
      }}
    >
      {children}
    </GameContext.Provider>
  );
};

export const useGame = () => {
  const context = useContext(GameContext);
  if (context === undefined) {
    throw new Error('useGame must be used within a GameProvider');
  }
  return context;
};
export type GameMode = 'single' | 'multi';

export interface Tile {
  color: string;
  isEmpty: boolean;
}

export type Board = Tile[][];

export interface Position {
  row: number;
  col: number;
}

export interface GameState {
  board: Board;
  solution: Board;
  currentEmptyPos: Position;
}
import { Board, Tile, Position } from '../types';

const COLORS = [
  '#FF6B6B', // Red
  '#4ECDC4', // Teal
  '#45B7D1', // Blue
  '#96CEB4', // Green
  '#FFEEAD', // Yellow
  '#D4A5A5'  // Pink
];

const GRID_SIZE = 5;
export const EMPTY_POSITION: Position = { row: 4, col: 4 };

export const createColorPattern = (): Tile[] => {
  const tiles: Tile[] = [];
  
  // Create 4 tiles of each color
  for (let colorIndex = 0; colorIndex < COLORS.length - 1; colorIndex++) {
    for (let i = 0; i < 4; i++) {
      tiles.push({ color: COLORS[colorIndex], isEmpty: false });
    }
  }
  
  // Add 4 tiles of the last color
  for (let i = 0; i < 4; i++) {
    tiles.push({ color: COLORS[COLORS.length - 1], isEmpty: false });
  }
  
  // Add empty tile
  tiles.push({ color: '#e5e7eb', isEmpty: true });
  return tiles;
};

export const shuffleTiles = (tiles: Tile[]): Tile[] => {
  const shuffled = [...tiles];
  for (let i = shuffled.length - 2; i > 0; i--) {
    const j = Math.floor(Math.random() * (i + 1));
    [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];
  }
  return shuffled;
};

export const createBoard = (tiles: Tile[]): Board => {
  const board: Board = [];
  for (let i = 0; i < GRID_SIZE; i++) {
    board.push(tiles.slice(i * GRID_SIZE, (i + 1) * GRID_SIZE));
  }
  return board;
};

export const canMoveTile = (row: number, col: number, currentEmptyPos: Position): boolean => {
  return (row === currentEmptyPos.row || col === currentEmptyPos.col) &&
         !(row === currentEmptyPos.row && col === currentEmptyPos.col);
};

export const createInitialGameState = () => {
  const tiles = createColorPattern();
  const shuffledMainTiles = shuffleTiles(tiles);
  const shuffledSolutionTiles = shuffleTiles(tiles);

  return {
    board: createBoard(shuffledMainTiles),
    solution: createBoard(shuffledSolutionTiles),
    currentEmptyPos: { ...EMPTY_POSITION }
  };
};
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/socket.io': {
        target: 'http://localhost:3000',
        ws: true
      }
    }
  }
})
import { GameProvider } from './context/GameContext';
import { Board } from './components/Board/Board';
import styled from 'styled-components';

const AppContainer = styled.div`
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 20px;
`;

const Title = styled.h1`
  color: #333;
  margin-bottom: 20px;
`;

function App() {
  return (
    <GameProvider>
      <AppContainer>
        <Title>Sliding Puzzle Game</Title>
        <Board />
      </AppContainer>
    </GameProvider>
  );
}

export default App;
import { useEffect } from 'react';
import styled from 'styled-components';
import { useGame } from '../../context/GameContext';
import { createInitialGameState } from '../../services/gameLogic';
import { Tile } from './Tile';

const BoardContainer = styled.div`
  display: grid;
  grid-template-columns: repeat(5, 1fr);
  gap: 5px;
  margin: 20px auto;
  max-width: 500px;
`;

export const Board = () => {
  const { board, setBoard, setSolutionBoard } = useGame();

  useEffect(() => {
    const { board: initialBoard, solution } = createInitialGameState();
    setBoard(initialBoard);
    setSolutionBoard(solution);
  }, [setBoard, setSolutionBoard]);

  return (
    <BoardContainer>
      {board.map((row, rowIndex) =>
        row.map((tile, colIndex) => (
          <Tile
            key={`${rowIndex}-${colIndex}`}
            color={tile.color}
            isEmpty={tile.isEmpty}
          />
        ))
      )}
    </BoardContainer>
  );
};
import styled from 'styled-components';

interface TileProps {
  color: string;
  isEmpty: boolean;
}

const TileButton = styled.button<TileProps>`
  width: 60px;
  height: 60px;
  border: none;
  border-radius: 4px;
  background-color: ${props => props.color};
  cursor: ${props => props.isEmpty ? 'default' : 'pointer'};
  opacity: ${props => props.isEmpty ? 0.5 : 1};

  &:hover {
    opacity: ${props => props.isEmpty ? 0.5 : 0.8};
  }
`;

export const Tile = ({ color, isEmpty }: TileProps) => {
  return <TileButton color={color} isEmpty={isEmpty} />;
};
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
  </React.StrictMode>,
)
